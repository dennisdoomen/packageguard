namespace PackageGuard.Core
{
    public class AllowList : PackageGuard.Core.PackagePolicy
    {
        public AllowList() { }
        public System.Collections.Generic.List<string> Feeds { get; set; }
        public bool Prerelease { get; set; }
    }
    public class CSharpProjectAnalyzer
    {
        public CSharpProjectAnalyzer(PackageGuard.Core.CSharpProjectScanner scanner, PackageGuard.Core.NuGetPackageAnalyzer analyzer) { }
        public PackageGuard.Core.AllowList AllowList { get; set; }
        public string CacheFilePath { get; set; }
        public PackageGuard.Core.DenyList DenyList { get; set; }
        public bool ForceRestore { get; set; }
        public string[] IgnoredFeeds { get; set; }
        public bool InteractiveRestore { get; set; }
        public Microsoft.Extensions.Logging.ILogger Logger { get; set; }
        public string ProjectPath { get; set; }
        public bool SkipRestore { get; set; }
        public bool UseCaching { get; set; }
        public System.Threading.Tasks.Task<PackageGuard.Core.PolicyViolation[]> ExecuteAnalysis() { }
    }
    public class CSharpProjectScanner
    {
        public CSharpProjectScanner(Microsoft.Extensions.Logging.ILogger logger) { }
        public System.Func<string[], string>? SelectSolution { get; set; }
        public System.Collections.Generic.List<string> FindProjects(string path) { }
    }
    public class DenyList : PackageGuard.Core.PackagePolicy
    {
        public DenyList() { }
        public bool Prerelease { get; set; }
    }
    public class DotNetLockFileLoader
    {
        public DotNetLockFileLoader() { }
        public bool ForceRestore { get; set; }
        public bool InteractiveRestore { get; set; }
        public Microsoft.Extensions.Logging.ILogger Logger { get; set; }
        public bool SkipRestore { get; set; }
        public NuGet.ProjectModel.LockFile? GetPackageLockFile(string path) { }
    }
    public sealed class LicenseFetcher
    {
        public LicenseFetcher(Microsoft.Extensions.Logging.ILogger logger, string? gitHubApiKey = null) { }
        public System.Threading.Tasks.Task AmendWithMissingLicenseInformation(PackageGuard.Core.PackageInfo package) { }
    }
    public class NuGetPackageAnalyzer
    {
        public NuGetPackageAnalyzer(Microsoft.Extensions.Logging.ILogger logger, PackageGuard.Core.LicenseFetcher licenseFetcher) { }
        public string[] IgnoredFeeds { get; set; }
        public System.Threading.Tasks.Task CollectPackageMetadata(string projectPath, string packageName, NuGet.Versioning.NuGetVersion packageVersion, PackageGuard.Core.PackageInfoCollection packages) { }
    }
    [MemoryPack.MemoryPackable(MemoryPack.GenerateType.Object)]
    public class PackageInfo : MemoryPack.IMemoryPackFormatterRegister, MemoryPack.IMemoryPackable<PackageGuard.Core.PackageInfo>
    {
        public PackageInfo() { }
        public string? License { get; set; }
        public string? LicenseUrl { get; set; }
        public string Name { get; set; }
        public string[] Projects { get; set; }
        public string? RepositoryUrl { get; set; }
        public string Source { get; set; }
        public string SourceUrl { get; set; }
        public string Version { get; set; }
        public bool MatchesFeed(string feedWildcard) { }
        public bool SatisfiesRange(string name, string? versionRange = null) { }
        public override string ToString() { }
        public void TrackAsUsedInProject(string projectPath) { }
    }
    public class PackageInfoCollection : System.Collections.Generic.IEnumerable<PackageGuard.Core.PackageInfo>, System.Collections.IEnumerable
    {
        public PackageInfoCollection(Microsoft.Extensions.Logging.ILogger logger) { }
        public void Add(PackageGuard.Core.PackageInfo package) { }
        public PackageGuard.Core.PackageInfo? Find(string name, string version, NuGet.Protocol.Core.Types.SourceRepository[] projectNuGetSources) { }
        public System.Collections.Generic.IEnumerator<PackageGuard.Core.PackageInfo> GetEnumerator() { }
        public System.Threading.Tasks.Task TryInitializeFromCache(string cacheFilePath) { }
        public System.Threading.Tasks.Task WriteToCache(string cacheFilePath) { }
    }
    public abstract class PackagePolicy
    {
        protected PackagePolicy() { }
        public System.Collections.Generic.List<string> Licenses { get; set; }
        public System.Collections.Generic.List<PackageGuard.Core.PackageSelector> Packages { get; set; }
    }
    public class PackageSelector
    {
        public PackageSelector(string id) { }
        public PackageSelector(string id, string versionRange) { }
        public string Id { get; set; }
        public string? VersionRange { get; set; }
    }
    public class PolicyViolation : System.IEquatable<PackageGuard.Core.PolicyViolation>
    {
        public PolicyViolation(string PackageId, string Version, string License, string[] Projects, string FeedName, string FeedUrl) { }
        public string FeedName { get; init; }
        public string FeedUrl { get; init; }
        public string License { get; init; }
        public string PackageId { get; init; }
        public string[] Projects { get; init; }
        public string Version { get; init; }
    }
}
namespace PackageGuard.Core.FetchingStrategies
{
    public class GitHubLicenseFetcher : PackageGuard.Core.FetchingStrategies.IFetchLicense
    {
        public GitHubLicenseFetcher(string? gitHubApiKey) { }
        public System.Threading.Tasks.Task FetchLicenseAsync(PackageGuard.Core.PackageInfo package) { }
    }
    public interface IFetchLicense
    {
        System.Threading.Tasks.Task FetchLicenseAsync(PackageGuard.Core.PackageInfo package);
    }
    public class UrlLicenseFetcher : PackageGuard.Core.FetchingStrategies.IFetchLicense
    {
        public UrlLicenseFetcher(Microsoft.Extensions.Logging.ILogger logger) { }
        public System.Threading.Tasks.Task FetchLicenseAsync(PackageGuard.Core.PackageInfo package) { }
    }
}